paths:
  /api/products/:
    get:
      security:
        - basicAuth: []
        - cookieAuth: []
      summary: Get all products
      tags:
        - Products
      responses:
        "200":
          description: Los usuarios fueron obtenidos desde la DB.
    post:
      summary: Registrer products
      tags:
        - Create Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/createProduct'
      responses:
        "201":
          description:  Producto agregado correctamente.
        "400":
          description: Ya existe un producto con ese código. No se agregó nada.
  /api/products/:id:
    get:
      summary: Obtiene los productos por su ID.
      parameters:
        - name: productID
          in: path
          required: true
          description: Id product a buscar
          schema:
            type : string
            # format: int64
            # minimum: 1         
      tags:
        - Products
      responses:
        "200":
          description: Los productos don ID fueron obtenidos desde la DB.
  /api/products/:pid:
    put:
      summary: Obtiene los productos por su ID
      tags:
        - Products
      responses:
        "200":
          description: Los productos fueron obtenidos OK desde la DB
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Product'
                # type: array
                # items: 
                #   type: string
          # -----------------------------------------------------
          # Links
          # -----------------------------------------------------
          links:
            GetUserByUserId:   # <---- arbitrary name for the link
              operationId: getUser
              # or
              # operationRef: '#/paths/~1users~1{userId}/get'
              parameters:
                userId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as
                the `userId` parameter in `GET /users/{userId}`.
          # -----------------------------------------------------


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        stock:
          type: integer
        precio:
          type: float
        imagen:
          type: image
  requestBodies:
    createUser:
      type: object
      properties:
        first_name:
          type: string
          description: Nombre de usurio
        last_name:
          type: string
          description: Apellido
        email:
          type: string
          description: Correo del usuario
        password:
          type: string
          description: Contraseña del usuario
      example:
        first_name: Diogo
        last_name: Oliver
        email: dos@hotmail.com
        password: "*****"          
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purpose
    cookieAuth:         # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: UserSID  # cookie name
security:
  - basicAuth: []  # <-- use the same name here
  - bearerAuth: []  # <-- use the same name here
  - cookieAuth: []